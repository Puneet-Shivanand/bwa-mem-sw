// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sw_pe_array_load_task (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        partInp_address0,
        partInp_ce0,
        partInp_q0,
        partTaskNums,
        staOffset,
        i,
        oneTaskBuf_address0,
        oneTaskBuf_ce0,
        oneTaskBuf_we0,
        oneTaskBuf_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 11'b1;
parameter    ap_ST_st2_fsm_1 = 11'b10;
parameter    ap_ST_st3_fsm_2 = 11'b100;
parameter    ap_ST_st4_fsm_3 = 11'b1000;
parameter    ap_ST_st5_fsm_4 = 11'b10000;
parameter    ap_ST_st6_fsm_5 = 11'b100000;
parameter    ap_ST_st7_fsm_6 = 11'b1000000;
parameter    ap_ST_pp0_stg0_fsm_7 = 11'b10000000;
parameter    ap_ST_st10_fsm_8 = 11'b100000000;
parameter    ap_ST_pp1_stg0_fsm_9 = 11'b1000000000;
parameter    ap_ST_st13_fsm_10 = 11'b10000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv9_0 = 9'b000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv9_1 = 9'b1;
parameter    ap_const_lv9_B = 9'b1011;
parameter    ap_const_lv4_8 = 4'b1000;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv4_4 = 4'b100;
parameter    ap_const_lv9_C = 9'b1100;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] partInp_address0;
output   partInp_ce0;
input  [31:0] partInp_q0;
input  [31:0] partTaskNums;
input  [31:0] staOffset;
input  [30:0] i;
output  [7:0] oneTaskBuf_address0;
output   oneTaskBuf_ce0;
output   oneTaskBuf_we0;
output  [31:0] oneTaskBuf_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] partInp_address0;
reg partInp_ce0;
reg[7:0] oneTaskBuf_address0;
reg oneTaskBuf_ce0;
reg oneTaskBuf_we0;
reg[31:0] oneTaskBuf_d0;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm = 11'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_29;
reg   [3:0] k_reg_229;
reg   [8:0] p_3_reg_240;
wire   [31:0] tmp_fu_271_p3;
reg   [31:0] tmp_reg_484;
wire   [31:0] taskParaPos_fu_279_p2;
reg   [31:0] taskParaPos_reg_490;
wire   [7:0] tmp_105_fu_290_p1;
reg   [7:0] tmp_105_reg_500;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_68;
wire   [10:0] grp_fu_252_p4;
reg   [10:0] tmp_80_reg_505;
wire   [2:0] tmp_107_fu_336_p1;
reg   [2:0] tmp_107_reg_515;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_81;
reg   [7:0] tmp_43_reg_520;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_92;
wire   [8:0] p_s_fu_374_p3;
reg   [8:0] p_s_reg_530;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_103;
reg   [31:0] tmp_parame_8_reg_541;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_113;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_122;
wire   [31:0] tmp_108_fu_392_p2;
reg   [31:0] tmp_108_reg_556;
wire   [0:0] exitcond3_fu_398_p2;
reg   [0:0] exitcond3_reg_561;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_7;
reg    ap_sig_bdd_133;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [3:0] k_1_fu_404_p2;
wire   [3:0] tmp_93_fu_424_p2;
reg   [3:0] tmp_93_reg_575;
wire   [31:0] tmp4_fu_439_p2;
reg   [31:0] tmp4_reg_580;
reg    ap_sig_cseq_ST_st10_fsm_8;
reg    ap_sig_bdd_156;
wire   [0:0] exitcond_fu_444_p2;
reg   [0:0] exitcond_reg_585;
reg    ap_sig_cseq_ST_pp1_stg0_fsm_9;
reg    ap_sig_bdd_165;
reg    ap_reg_ppiten_pp1_it0 = 1'b0;
reg    ap_reg_ppiten_pp1_it1 = 1'b0;
wire   [8:0] l_V_fu_449_p2;
wire   [8:0] tmp_99_fu_474_p2;
reg   [8:0] tmp_99_reg_599;
wire  signed [63:0] tmp_s_fu_285_p1;
wire  signed [63:0] tmp_82_fu_299_p1;
wire  signed [63:0] tmp_85_fu_355_p1;
wire  signed [63:0] tmp_92_fu_419_p1;
wire   [63:0] tmp_94_fu_430_p1;
wire  signed [63:0] tmp_98_fu_469_p1;
wire   [63:0] tmp_100_fu_480_p1;
wire   [31:0] i_cast_fu_262_p1;
wire   [31:0] tmp_109_cast_fu_387_p1;
wire   [28:0] tmp_104_fu_267_p1;
wire   [31:0] tmp_81_fu_294_p2;
wire   [7:0] tmp_106_fu_304_p1;
wire   [8:0] tmp_95_cast_fu_308_p1;
wire   [8:0] tmp_96_cast_fu_311_p1;
wire   [8:0] tmp3_fu_320_p2;
wire   [10:0] tmp3_cast_fu_326_p1;
wire   [10:0] tmp2_fu_315_p2;
wire   [10:0] qrLen_div8_V_fu_330_p2;
wire   [31:0] tmp_84_fu_350_p2;
wire   [8:0] r_V_cast_fu_365_p1;
wire   [0:0] tmp_86_fu_360_p2;
wire   [8:0] qrLen_div8_V_2_fu_368_p2;
wire   [8:0] tmp_87_fu_382_p2;
wire   [31:0] tmp_90_fu_410_p1;
wire   [31:0] tmp_91_fu_414_p2;
wire   [31:0] tmp_88_fu_434_p2;
wire   [31:0] tmp_96_fu_455_p1;
wire   [31:0] tmp5_fu_459_p2;
wire   [31:0] tmp_97_fu_464_p2;
reg    ap_sig_cseq_ST_st13_fsm_10;
reg    ap_sig_bdd_386;
reg   [10:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & ~(exitcond3_fu_398_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (exitcond3_fu_398_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & ~(exitcond3_fu_398_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp1_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & ~(ap_const_lv1_0 == exitcond_fu_444_p2))) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_8)) begin
            ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp1_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp1_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_lv1_0 == exitcond_fu_444_p2))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_8) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & ~(ap_const_lv1_0 == exitcond_fu_444_p2)))) begin
            ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond3_fu_398_p2 == ap_const_lv1_0))) begin
        k_reg_229 <= k_1_fu_404_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        k_reg_229 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_8)) begin
        p_3_reg_240 <= ap_const_lv9_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & (ap_const_lv1_0 == exitcond_fu_444_p2))) begin
        p_3_reg_240 <= l_V_fu_449_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7)) begin
        exitcond3_reg_561 <= exitcond3_fu_398_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9)) begin
        exitcond_reg_585 <= exitcond_fu_444_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        p_s_reg_530 <= p_s_fu_374_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        taskParaPos_reg_490[3] <= taskParaPos_fu_279_p2[3];
taskParaPos_reg_490[4] <= taskParaPos_fu_279_p2[4];
taskParaPos_reg_490[5] <= taskParaPos_fu_279_p2[5];
taskParaPos_reg_490[6] <= taskParaPos_fu_279_p2[6];
taskParaPos_reg_490[7] <= taskParaPos_fu_279_p2[7];
taskParaPos_reg_490[8] <= taskParaPos_fu_279_p2[8];
taskParaPos_reg_490[9] <= taskParaPos_fu_279_p2[9];
taskParaPos_reg_490[10] <= taskParaPos_fu_279_p2[10];
taskParaPos_reg_490[11] <= taskParaPos_fu_279_p2[11];
taskParaPos_reg_490[12] <= taskParaPos_fu_279_p2[12];
taskParaPos_reg_490[13] <= taskParaPos_fu_279_p2[13];
taskParaPos_reg_490[14] <= taskParaPos_fu_279_p2[14];
taskParaPos_reg_490[15] <= taskParaPos_fu_279_p2[15];
taskParaPos_reg_490[16] <= taskParaPos_fu_279_p2[16];
taskParaPos_reg_490[17] <= taskParaPos_fu_279_p2[17];
taskParaPos_reg_490[18] <= taskParaPos_fu_279_p2[18];
taskParaPos_reg_490[19] <= taskParaPos_fu_279_p2[19];
taskParaPos_reg_490[20] <= taskParaPos_fu_279_p2[20];
taskParaPos_reg_490[21] <= taskParaPos_fu_279_p2[21];
taskParaPos_reg_490[22] <= taskParaPos_fu_279_p2[22];
taskParaPos_reg_490[23] <= taskParaPos_fu_279_p2[23];
taskParaPos_reg_490[24] <= taskParaPos_fu_279_p2[24];
taskParaPos_reg_490[25] <= taskParaPos_fu_279_p2[25];
taskParaPos_reg_490[26] <= taskParaPos_fu_279_p2[26];
taskParaPos_reg_490[27] <= taskParaPos_fu_279_p2[27];
taskParaPos_reg_490[28] <= taskParaPos_fu_279_p2[28];
taskParaPos_reg_490[29] <= taskParaPos_fu_279_p2[29];
taskParaPos_reg_490[30] <= taskParaPos_fu_279_p2[30];
taskParaPos_reg_490[31] <= taskParaPos_fu_279_p2[31];
        tmp_reg_484[3] <= tmp_fu_271_p3[3];
tmp_reg_484[4] <= tmp_fu_271_p3[4];
tmp_reg_484[5] <= tmp_fu_271_p3[5];
tmp_reg_484[6] <= tmp_fu_271_p3[6];
tmp_reg_484[7] <= tmp_fu_271_p3[7];
tmp_reg_484[8] <= tmp_fu_271_p3[8];
tmp_reg_484[9] <= tmp_fu_271_p3[9];
tmp_reg_484[10] <= tmp_fu_271_p3[10];
tmp_reg_484[11] <= tmp_fu_271_p3[11];
tmp_reg_484[12] <= tmp_fu_271_p3[12];
tmp_reg_484[13] <= tmp_fu_271_p3[13];
tmp_reg_484[14] <= tmp_fu_271_p3[14];
tmp_reg_484[15] <= tmp_fu_271_p3[15];
tmp_reg_484[16] <= tmp_fu_271_p3[16];
tmp_reg_484[17] <= tmp_fu_271_p3[17];
tmp_reg_484[18] <= tmp_fu_271_p3[18];
tmp_reg_484[19] <= tmp_fu_271_p3[19];
tmp_reg_484[20] <= tmp_fu_271_p3[20];
tmp_reg_484[21] <= tmp_fu_271_p3[21];
tmp_reg_484[22] <= tmp_fu_271_p3[22];
tmp_reg_484[23] <= tmp_fu_271_p3[23];
tmp_reg_484[24] <= tmp_fu_271_p3[24];
tmp_reg_484[25] <= tmp_fu_271_p3[25];
tmp_reg_484[26] <= tmp_fu_271_p3[26];
tmp_reg_484[27] <= tmp_fu_271_p3[27];
tmp_reg_484[28] <= tmp_fu_271_p3[28];
tmp_reg_484[29] <= tmp_fu_271_p3[29];
tmp_reg_484[30] <= tmp_fu_271_p3[30];
tmp_reg_484[31] <= tmp_fu_271_p3[31];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_8)) begin
        tmp4_reg_580 <= tmp4_fu_439_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        tmp_105_reg_500 <= tmp_105_fu_290_p1;
        tmp_80_reg_505 <= {{partInp_q0[ap_const_lv32_1A : ap_const_lv32_10]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_107_reg_515 <= tmp_107_fu_336_p1;
        tmp_43_reg_520 <= {{qrLen_div8_V_fu_330_p2[ap_const_lv32_A : ap_const_lv32_3]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        tmp_108_reg_556[3] <= tmp_108_fu_392_p2[3];
tmp_108_reg_556[4] <= tmp_108_fu_392_p2[4];
tmp_108_reg_556[5] <= tmp_108_fu_392_p2[5];
tmp_108_reg_556[6] <= tmp_108_fu_392_p2[6];
tmp_108_reg_556[7] <= tmp_108_fu_392_p2[7];
tmp_108_reg_556[8] <= tmp_108_fu_392_p2[8];
tmp_108_reg_556[9] <= tmp_108_fu_392_p2[9];
tmp_108_reg_556[10] <= tmp_108_fu_392_p2[10];
tmp_108_reg_556[11] <= tmp_108_fu_392_p2[11];
tmp_108_reg_556[12] <= tmp_108_fu_392_p2[12];
tmp_108_reg_556[13] <= tmp_108_fu_392_p2[13];
tmp_108_reg_556[14] <= tmp_108_fu_392_p2[14];
tmp_108_reg_556[15] <= tmp_108_fu_392_p2[15];
tmp_108_reg_556[16] <= tmp_108_fu_392_p2[16];
tmp_108_reg_556[17] <= tmp_108_fu_392_p2[17];
tmp_108_reg_556[18] <= tmp_108_fu_392_p2[18];
tmp_108_reg_556[19] <= tmp_108_fu_392_p2[19];
tmp_108_reg_556[20] <= tmp_108_fu_392_p2[20];
tmp_108_reg_556[21] <= tmp_108_fu_392_p2[21];
tmp_108_reg_556[22] <= tmp_108_fu_392_p2[22];
tmp_108_reg_556[23] <= tmp_108_fu_392_p2[23];
tmp_108_reg_556[24] <= tmp_108_fu_392_p2[24];
tmp_108_reg_556[25] <= tmp_108_fu_392_p2[25];
tmp_108_reg_556[26] <= tmp_108_fu_392_p2[26];
tmp_108_reg_556[27] <= tmp_108_fu_392_p2[27];
tmp_108_reg_556[28] <= tmp_108_fu_392_p2[28];
tmp_108_reg_556[29] <= tmp_108_fu_392_p2[29];
tmp_108_reg_556[30] <= tmp_108_fu_392_p2[30];
tmp_108_reg_556[31] <= tmp_108_fu_392_p2[31];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (exitcond3_fu_398_p2 == ap_const_lv1_0))) begin
        tmp_93_reg_575 <= tmp_93_fu_424_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_lv1_0 == exitcond_fu_444_p2))) begin
        tmp_99_reg_599 <= tmp_99_fu_474_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        tmp_parame_8_reg_541 <= partInp_q0;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st13_fsm_10)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_10))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st13_fsm_10)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_10)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_7 assign process. ///
always @ (ap_sig_bdd_133)
begin
    if (ap_sig_bdd_133) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp1_stg0_fsm_9 assign process. ///
always @ (ap_sig_bdd_165)
begin
    if (ap_sig_bdd_165) begin
        ap_sig_cseq_ST_pp1_stg0_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp1_stg0_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_8 assign process. ///
always @ (ap_sig_bdd_156)
begin
    if (ap_sig_bdd_156) begin
        ap_sig_cseq_ST_st10_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_8 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_10 assign process. ///
always @ (ap_sig_bdd_386)
begin
    if (ap_sig_bdd_386) begin
        ap_sig_cseq_ST_st13_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_29)
begin
    if (ap_sig_bdd_29) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_68)
begin
    if (ap_sig_bdd_68) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_81)
begin
    if (ap_sig_bdd_81) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_92)
begin
    if (ap_sig_bdd_92) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_103)
begin
    if (ap_sig_bdd_103) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_113)
begin
    if (ap_sig_bdd_113) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_122)
begin
    if (ap_sig_bdd_122) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// oneTaskBuf_address0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_pp0_stg0_fsm_7 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp1_stg0_fsm_9 or ap_reg_ppiten_pp1_it1 or tmp_94_fu_430_p1 or tmp_100_fu_480_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1))) begin
        oneTaskBuf_address0 = tmp_100_fu_480_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
        oneTaskBuf_address0 = tmp_94_fu_430_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        oneTaskBuf_address0 = ap_const_lv64_3;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        oneTaskBuf_address0 = ap_const_lv64_2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        oneTaskBuf_address0 = ap_const_lv64_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        oneTaskBuf_address0 = ap_const_lv64_1;
    end else begin
        oneTaskBuf_address0 = 'bx;
    end
end

/// oneTaskBuf_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_pp0_stg0_fsm_7 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp1_stg0_fsm_9 or ap_reg_ppiten_pp1_it1)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        oneTaskBuf_ce0 = ap_const_logic_1;
    end else begin
        oneTaskBuf_ce0 = ap_const_logic_0;
    end
end

/// oneTaskBuf_d0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or partInp_q0 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_pp0_stg0_fsm_7 or ap_reg_ppiten_pp0_it1 or ap_sig_cseq_ST_pp1_stg0_fsm_9 or ap_reg_ppiten_pp1_it1 or i_cast_fu_262_p1 or tmp_109_cast_fu_387_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1)))) begin
        oneTaskBuf_d0 = partInp_q0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        oneTaskBuf_d0 = tmp_109_cast_fu_387_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        oneTaskBuf_d0 = i_cast_fu_262_p1;
    end else begin
        oneTaskBuf_d0 = 'bx;
    end
end

/// oneTaskBuf_we0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st7_fsm_6 or exitcond3_reg_561 or ap_sig_cseq_ST_pp0_stg0_fsm_7 or ap_reg_ppiten_pp0_it1 or exitcond_reg_585 or ap_sig_cseq_ST_pp1_stg0_fsm_9 or ap_reg_ppiten_pp1_it1)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & (exitcond3_reg_561 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it1) & (ap_const_lv1_0 == exitcond_reg_585)))) begin
        oneTaskBuf_we0 = ap_const_logic_1;
    end else begin
        oneTaskBuf_we0 = ap_const_logic_0;
    end
end

/// partInp_address0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp0_stg0_fsm_7 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp1_stg0_fsm_9 or ap_reg_ppiten_pp1_it0 or tmp_s_fu_285_p1 or tmp_82_fu_299_p1 or tmp_85_fu_355_p1 or tmp_92_fu_419_p1 or tmp_98_fu_469_p1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0))) begin
        partInp_address0 = tmp_98_fu_469_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        partInp_address0 = tmp_92_fu_419_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        partInp_address0 = ap_const_lv64_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        partInp_address0 = ap_const_lv64_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        partInp_address0 = tmp_85_fu_355_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        partInp_address0 = tmp_82_fu_299_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        partInp_address0 = tmp_s_fu_285_p1;
    end else begin
        partInp_address0 = 'bx;
    end
end

/// partInp_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_pp0_stg0_fsm_7 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp1_stg0_fsm_9 or ap_reg_ppiten_pp1_it0)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_7) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp1_stg0_fsm_9) & (ap_const_logic_1 == ap_reg_ppiten_pp1_it0)))) begin
        partInp_ce0 = ap_const_logic_1;
    end else begin
        partInp_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond3_fu_398_p2 or ap_reg_ppiten_pp0_it0 or exitcond_fu_444_p2 or ap_reg_ppiten_pp1_it0)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
        end
        ap_ST_pp0_stg0_fsm_7 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond3_fu_398_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_8;
            end
        end
        ap_ST_st10_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_pp1_stg0_fsm_9;
        end
        ap_ST_pp1_stg0_fsm_9 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp1_it0) & ~(ap_const_lv1_0 == exitcond_fu_444_p2))) begin
                ap_NS_fsm = ap_ST_pp1_stg0_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st13_fsm_10;
            end
        end
        ap_ST_st13_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_103 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_103 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_113 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_113 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_122 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_122 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_133 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_133 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_156 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_156 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_165 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_165 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_29 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_29 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_386 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_386 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_68 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_68 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_81 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_81 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_92 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_92 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign exitcond3_fu_398_p2 = (k_reg_229 == ap_const_lv4_8? 1'b1: 1'b0);
assign exitcond_fu_444_p2 = (p_3_reg_240 == p_s_reg_530? 1'b1: 1'b0);
assign grp_fu_252_p4 = {{partInp_q0[ap_const_lv32_1A : ap_const_lv32_10]}};
assign i_cast_fu_262_p1 = i;
assign k_1_fu_404_p2 = (k_reg_229 + ap_const_lv4_1);
assign l_V_fu_449_p2 = (p_3_reg_240 + ap_const_lv9_1);
assign p_s_fu_374_p3 = ((tmp_86_fu_360_p2)? r_V_cast_fu_365_p1: qrLen_div8_V_2_fu_368_p2);
assign qrLen_div8_V_2_fu_368_p2 = (r_V_cast_fu_365_p1 + ap_const_lv9_1);
assign qrLen_div8_V_fu_330_p2 = (tmp3_cast_fu_326_p1 + tmp2_fu_315_p2);
assign r_V_cast_fu_365_p1 = tmp_43_reg_520;
assign taskParaPos_fu_279_p2 = (tmp_fu_271_p3 + ap_const_lv32_8);
assign tmp2_fu_315_p2 = (tmp_80_reg_505 + grp_fu_252_p4);
assign tmp3_cast_fu_326_p1 = tmp3_fu_320_p2;
assign tmp3_fu_320_p2 = (tmp_95_cast_fu_308_p1 + tmp_96_cast_fu_311_p1);
assign tmp4_fu_439_p2 = (tmp_88_fu_434_p2 + tmp_108_reg_556);
assign tmp5_fu_459_p2 = (tmp_parame_8_reg_541 + tmp_96_fu_455_p1);
assign tmp_100_fu_480_p1 = tmp_99_reg_599;
assign tmp_104_fu_267_p1 = i[28:0];
assign tmp_105_fu_290_p1 = partInp_q0[7:0];
assign tmp_106_fu_304_p1 = partInp_q0[7:0];
assign tmp_107_fu_336_p1 = qrLen_div8_V_fu_330_p2[2:0];
assign tmp_108_fu_392_p2 = partTaskNums << ap_const_lv32_3;
assign tmp_109_cast_fu_387_p1 = tmp_87_fu_382_p2;
assign tmp_81_fu_294_p2 = (tmp_reg_484 + ap_const_lv32_9);
assign tmp_82_fu_299_p1 = $signed(tmp_81_fu_294_p2);
assign tmp_84_fu_350_p2 = (tmp_reg_484 + ap_const_lv32_A);
assign tmp_85_fu_355_p1 = $signed(tmp_84_fu_350_p2);
assign tmp_86_fu_360_p2 = (tmp_107_reg_515 == ap_const_lv3_0? 1'b1: 1'b0);
assign tmp_87_fu_382_p2 = (p_s_reg_530 + ap_const_lv9_B);
assign tmp_88_fu_434_p2 = (ap_const_lv32_8 - staOffset);
assign tmp_90_fu_410_p1 = k_reg_229;
assign tmp_91_fu_414_p2 = (taskParaPos_reg_490 + tmp_90_fu_410_p1);
assign tmp_92_fu_419_p1 = $signed(tmp_91_fu_414_p2);
assign tmp_93_fu_424_p2 = (k_reg_229 + ap_const_lv4_4);
assign tmp_94_fu_430_p1 = tmp_93_reg_575;
assign tmp_95_cast_fu_308_p1 = tmp_105_reg_500;
assign tmp_96_cast_fu_311_p1 = tmp_106_fu_304_p1;
assign tmp_96_fu_455_p1 = p_3_reg_240;
assign tmp_97_fu_464_p2 = (tmp5_fu_459_p2 + tmp4_reg_580);
assign tmp_98_fu_469_p1 = $signed(tmp_97_fu_464_p2);
assign tmp_99_fu_474_p2 = (p_3_reg_240 + ap_const_lv9_C);
assign tmp_fu_271_p3 = {{tmp_104_fu_267_p1}, {ap_const_lv3_0}};
assign tmp_s_fu_285_p1 = $signed(taskParaPos_fu_279_p2);
always @ (posedge ap_clk)
begin
    tmp_reg_484[2:0] <= 3'b000;
    taskParaPos_reg_490[2:0] <= 3'b000;
    tmp_108_reg_556[2:0] <= 3'b000;
end



endmodule //sw_pe_array_load_task

