// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sw_pe_array_fill_resulBuf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        results_V_dout,
        results_V_empty_n,
        results_V_read,
        resultsBuf_address0,
        resultsBuf_ce0,
        resultsBuf_we0,
        resultsBuf_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv16_5 = 16'b101;
parameter    ap_const_lv8_4 = 8'b100;
parameter    ap_const_lv16_1 = 16'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] results_V_dout;
input   results_V_empty_n;
output   results_V_read;
output  [8:0] resultsBuf_address0;
output   resultsBuf_ce0;
output   resultsBuf_we0;
output  [31:0] resultsBuf_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg results_V_read;
reg[8:0] resultsBuf_address0;
reg resultsBuf_ce0;
reg resultsBuf_we0;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_46;
wire   [0:0] tmp_nbreadreq_fu_50_p3;
reg    ap_sig_bdd_54;
reg   [0:0] tmp_reg_166;
wire   [15:0] Addr_t_2_fu_114_p2;
reg   [15:0] Addr_t_2_reg_173;
wire   [0:0] tmp_s_fu_103_p2;
wire   [7:0] tmp_5_fu_124_p2;
reg   [7:0] tmp_5_reg_178;
wire   [15:0] Addr_t_1_fu_130_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_73;
wire   [0:0] exitcond_fu_140_p2;
reg    ap_sig_bdd_81;
reg   [15:0] Addr_t_1_in_reg_85;
wire  signed [63:0] tmp_1_fu_109_p1;
wire  signed [63:0] tmp_2_fu_145_p1;
reg   [15:0] Addr_t_fu_46;
reg    ap_sig_bdd_103;
wire   [7:0] tmp_4_fu_120_p1;
wire   [7:0] tmp_6_fu_136_p1;
reg   [2:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_nbreadreq_fu_50_p3 == ap_const_lv1_0) & ~ap_sig_bdd_54 & ~(ap_const_lv1_0 == tmp_s_fu_103_p2))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_reg_166) & (ap_const_lv1_0 == exitcond_fu_140_p2) & ~ap_sig_bdd_81)) begin
        Addr_t_1_in_reg_85 <= Addr_t_1_fu_130_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_nbreadreq_fu_50_p3 == ap_const_lv1_0) & ~ap_sig_bdd_54 & (ap_const_lv1_0 == tmp_s_fu_103_p2))) begin
        Addr_t_1_in_reg_85 <= Addr_t_fu_46;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_reg_166) & ~ap_sig_bdd_81 & ~(ap_const_lv1_0 == exitcond_fu_140_p2))) begin
        Addr_t_fu_46 <= Addr_t_2_reg_173;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_103)) begin
        Addr_t_fu_46 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_nbreadreq_fu_50_p3 == ap_const_lv1_0) & ~ap_sig_bdd_54 & (ap_const_lv1_0 == tmp_s_fu_103_p2))) begin
        Addr_t_2_reg_173 <= Addr_t_2_fu_114_p2;
        tmp_5_reg_178 <= tmp_5_fu_124_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_54)) begin
        tmp_reg_166 <= tmp_nbreadreq_fu_50_p3;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or tmp_nbreadreq_fu_50_p3 or ap_sig_bdd_54 or tmp_s_fu_103_p2)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_nbreadreq_fu_50_p3 == ap_const_lv1_0) & ~ap_sig_bdd_54 & ~(ap_const_lv1_0 == tmp_s_fu_103_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_nbreadreq_fu_50_p3 or ap_sig_bdd_54 or tmp_s_fu_103_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_nbreadreq_fu_50_p3 == ap_const_lv1_0) & ~ap_sig_bdd_54 & ~(ap_const_lv1_0 == tmp_s_fu_103_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_46)
begin
    if (ap_sig_bdd_46) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_73)
begin
    if (ap_sig_bdd_73) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// resultsBuf_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st3_fsm_2 or tmp_1_fu_109_p1 or tmp_2_fu_145_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        resultsBuf_address0 = tmp_2_fu_145_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        resultsBuf_address0 = tmp_1_fu_109_p1;
    end else begin
        resultsBuf_address0 = 'bx;
    end
end

/// resultsBuf_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_bdd_54 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_bdd_81)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_bdd_54) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~ap_sig_bdd_81))) begin
        resultsBuf_ce0 = ap_const_logic_1;
    end else begin
        resultsBuf_ce0 = ap_const_logic_0;
    end
end

/// resultsBuf_we0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_nbreadreq_fu_50_p3 or ap_sig_bdd_54 or tmp_reg_166 or tmp_s_fu_103_p2 or ap_sig_cseq_ST_st3_fsm_2 or exitcond_fu_140_p2 or ap_sig_bdd_81)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_nbreadreq_fu_50_p3 == ap_const_lv1_0) & ~ap_sig_bdd_54 & (ap_const_lv1_0 == tmp_s_fu_103_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_reg_166) & (ap_const_lv1_0 == exitcond_fu_140_p2) & ~ap_sig_bdd_81))) begin
        resultsBuf_we0 = ap_const_logic_1;
    end else begin
        resultsBuf_we0 = ap_const_logic_0;
    end
end

/// results_V_read assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_nbreadreq_fu_50_p3 or ap_sig_bdd_54 or tmp_reg_166 or ap_sig_cseq_ST_st3_fsm_2 or exitcond_fu_140_p2 or ap_sig_bdd_81)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_reg_166) & (ap_const_lv1_0 == exitcond_fu_140_p2) & ~ap_sig_bdd_81) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_nbreadreq_fu_50_p3 == ap_const_lv1_0) & ~ap_sig_bdd_54))) begin
        results_V_read = ap_const_logic_1;
    end else begin
        results_V_read = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or tmp_nbreadreq_fu_50_p3 or ap_sig_bdd_54 or tmp_reg_166 or tmp_s_fu_103_p2 or exitcond_fu_140_p2 or ap_sig_bdd_81 or ap_sig_bdd_103)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_103) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((~(tmp_nbreadreq_fu_50_p3 == ap_const_lv1_0) & ~ap_sig_bdd_54 & ~(ap_const_lv1_0 == tmp_s_fu_103_p2))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if ((~ap_sig_bdd_54 & ((tmp_nbreadreq_fu_50_p3 == ap_const_lv1_0) | (ap_const_lv1_0 == tmp_s_fu_103_p2)))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((~ap_sig_bdd_81 & ((ap_const_lv1_0 == tmp_reg_166) | ~(ap_const_lv1_0 == exitcond_fu_140_p2)))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if ((~(ap_const_lv1_0 == tmp_reg_166) & (ap_const_lv1_0 == exitcond_fu_140_p2) & ~ap_sig_bdd_81)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Addr_t_1_fu_130_p2 = (Addr_t_1_in_reg_85 + ap_const_lv16_1);
assign Addr_t_2_fu_114_p2 = (Addr_t_fu_46 + ap_const_lv16_5);

/// ap_sig_bdd_103 assign process. ///
always @ (ap_start or ap_done_reg)
begin
    ap_sig_bdd_103 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_46 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_46 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_54 assign process. ///
always @ (results_V_empty_n or tmp_nbreadreq_fu_50_p3)
begin
    ap_sig_bdd_54 = ((results_V_empty_n == ap_const_logic_0) & ~(tmp_nbreadreq_fu_50_p3 == ap_const_lv1_0));
end

/// ap_sig_bdd_73 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_73 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_81 assign process. ///
always @ (results_V_empty_n or tmp_reg_166 or exitcond_fu_140_p2)
begin
    ap_sig_bdd_81 = ((results_V_empty_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_reg_166) & (ap_const_lv1_0 == exitcond_fu_140_p2));
end
assign exitcond_fu_140_p2 = (tmp_6_fu_136_p1 == tmp_5_reg_178? 1'b1: 1'b0);
assign resultsBuf_d0 = results_V_dout;
assign tmp_1_fu_109_p1 = $signed(Addr_t_fu_46);
assign tmp_2_fu_145_p1 = $signed(Addr_t_1_fu_130_p2);
assign tmp_4_fu_120_p1 = Addr_t_fu_46[7:0];
assign tmp_5_fu_124_p2 = (tmp_4_fu_120_p1 + ap_const_lv8_4);
assign tmp_6_fu_136_p1 = Addr_t_1_in_reg_85[7:0];
assign tmp_nbreadreq_fu_50_p3 = results_V_empty_n;
assign tmp_s_fu_103_p2 = (results_V_dout == ap_const_lv32_FFFFFFFF? 1'b1: 1'b0);


endmodule //sw_pe_array_fill_resulBuf

